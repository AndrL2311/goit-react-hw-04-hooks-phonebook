{"version":3,"sources":["components/Form/Form.module.css","components/Contact/Contact.module.css","App.module.css","components/Filter/Filter.module.css","components/Contacts/Contacts.module.css","components/Form/Form.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/Contacts/Contacts.jsx","App.jsx","index.js"],"names":["module","exports","Form","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","formBox","label","htmlFor","input","type","id","onChange","pattern","title","required","button","React","Component","Filter","Contact","onDeleteContact","item","onClick","Contacts","contacts","list","map","contact","App","filter","formSubmitHandler","data","find","alert","prevState","deleteContact","contactId","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","prevProps","localStorage","setItem","JSON","stringify","getItem","parsedContacts","parse","visibleContacts","container","titlePhonebook","titleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6add5f32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBox\":\"Form_formBox__t4FbK\",\"button\":\"Form_button__243jh\",\"label\":\"Form_label__15SAE\",\"input\":\"Form_input__2ESfd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__1d_kg\",\"button\":\"Contact_button__1wUL0\",\"name\":\"Contact_name__2ZcKm\",\"number\":\"Contact_number__2MvnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"titlePhonebook\":\"App_titlePhonebook__2kfSQ\",\"titleContacts\":\"App_titleContacts__41vwQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__tcvns\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './Form.module.css';\n\nclass Form extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    // Проп который передается форме для вызова при сабмите\n    this.props.onSubmit(this.state);\n    // Сбрасываем имя и номер\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={s.formBox} onSubmit={this.handleSubmit}>\n        <label className={s.label} htmlFor={this.nameInputId}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            id={this.nameInputId}\n            value={name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label} htmlFor={this.numberInputId}>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            id={this.numberInputId}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contacts by name{' '}\n      <input\n        type=\"text\"\n        className={s.input}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nfunction Contact({ id, name, number, onDeleteContact }) {\n  return (\n    <li className={s.item}>\n      <span className={s.name}>{name}</span>\n      <span className={s.number}>{number}</span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\nimport Contact from '../Contact/Contact';\n\nfunction Contacts({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(contact => (\n        <Contact\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDeleteContact={onDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default Contacts;\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './App.module.css';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport Contacts from './components/Contacts/Contacts';\n\nclass App extends React.Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  formSubmitHandler = data => {\n    if (this.state.contacts.find(contact => contact.name === data.name)) {\n      return alert(`${data.name} is alredy in contacts`);\n    } else {\n      data.id = uuidv4();\n      this.setState(prevState => {\n        // console.log(prevState.contacts); // будет разный на каждой итерации\n        // Добавляем в масив новый объект\n        return { contacts: [...prevState.contacts, data] };\n      });\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className={s.container}>\n        <h1 className={s.titlePhonebook}>Phonebook</h1>\n        <Form onSubmit={this.formSubmitHandler} />\n        <h2 className={s.titleContacts}>Contacts</h2>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <Contacts\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n// ============================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}